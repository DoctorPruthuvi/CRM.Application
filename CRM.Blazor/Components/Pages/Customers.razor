@page "/"
@using CRM.Domain.Entities
@using CRM.Application.Interfaces
@inject ICustomerService CustomerService
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6"><i class="fas fa-users me-3"></i>Customer Management</h1>
                    <p class="text-muted">Manage your customer accounts</p>
                </div>
                <button class="btn btn-primary btn-lg" @onclick="AddNewCustomer">
                    <i class="fas fa-plus me-2"></i>Add Customer
                </button>
            </div>
        </div>
    </div>

    <!-- Add/Edit Form Modal -->
    @if (showAddEditForm)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas @(currentCustomer.AccountId == 0 ? "fa-user-plus" : "fa-user-edit") me-2"></i>
                            @(currentCustomer.AccountId == 0 ? "Add New Customer" : "Edit Customer")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>

                    <EditForm Model="@currentCustomer" OnValidSubmit="@SaveCustomer">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger m-3" />

                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">First Name *</label>
                                        <InputText class="form-control" @bind-Value="currentCustomer.FirstName" />
                                        <ValidationMessage For="@(() => currentCustomer.FirstName)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Last Name *</label>
                                        <InputText class="form-control" @bind-Value="currentCustomer.LastName" />
                                        <ValidationMessage For="@(() => currentCustomer.LastName)" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Email *</label>
                                <InputText class="form-control" @bind-Value="currentCustomer.Email" />
                                <ValidationMessage For="@(() => currentCustomer.Email)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Phone Number</label>
                                <InputText class="form-control" @bind-Value="currentCustomer.PhoneNumber" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Address</label>
                                <InputText class="form-control" @bind-Value="currentCustomer.Address" />
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">City</label>
                                        <InputText class="form-control" @bind-Value="currentCustomer.City" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">State</label>
                                        <InputText class="form-control" @bind-Value="currentCustomer.State" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Country</label>
                                        <InputText class="form-control" @bind-Value="currentCustomer.Country" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save me-2"></i>Save
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                                <i class="fas fa-times me-2"></i>Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Error Message -->
    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading customers...</p>
        </div>
    }
    else
    {
        <!-- Search and Stats -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" placeholder="Search customers..."
                           @bind="searchTerm" @oninput="FilterCustomers" />
                </div>
            </div>
            <div class="col-md-6 text-end">
                <span class="badge bg-primary fs-6">
                    <i class="fas fa-users me-1"></i> Total: @customers.Count
                </span>
            </div>
        </div>

        <!-- Customers Table -->
        @if (customers.Count == 0)
        {
            <div class="text-center py-5">
                <i class="fas fa-users fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">No customers found</h4>
                <p class="text-muted">Get started by adding your first customer</p>
                <button class="btn btn-primary btn-lg mt-2" @onclick="AddNewCustomer">
                    <i class="fas fa-plus me-2"></i>Add First Customer
                </button>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Location</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in filteredCustomers)
                                {
                                    <tr>
                                        <td><span class="badge bg-secondary">#@customer.AccountId</span></td>
                                        <td>
                                            <strong>@customer.FirstName @customer.LastName</strong>
                                        </td>
                                        <td>@customer.Email</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(customer.PhoneNumber))
                                            {
                                                <span class="badge bg-info">@customer.PhoneNumber</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(customer.City))
                                            {
                                                <span>@customer.City, @customer.Country</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>@customer.DateCreated.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditCustomer(customer)"
                                                        title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteCustomer(customer.AccountId)"
                                                        title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Customer> customers = new List<Customer>();
    private List<Customer> filteredCustomers = new List<Customer>();
    private Customer currentCustomer = new Customer();
    private bool showAddEditForm = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading customers: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCustomers()
    {
        var result = await CustomerService.GetAllCustomersAsync();
        customers = result?.ToList() ?? new List<Customer>();
        filteredCustomers = customers;
    }

    private void AddNewCustomer()
    {
        currentCustomer = new Customer();
        showAddEditForm = true;
        errorMessage = null;
    }

    private void EditCustomer(Customer customer)
    {
        currentCustomer = new Customer
            {
                AccountId = customer.AccountId,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Email = customer.Email,
                PhoneNumber = customer.PhoneNumber,
                Address = customer.Address,
                City = customer.City,
                State = customer.State,
                Country = customer.Country,
                DateCreated = customer.DateCreated
            };
        showAddEditForm = true;
        errorMessage = null;
    }

    private async Task SaveCustomer()
    {
        try
        {
            if (currentCustomer.AccountId == 0)
            {
                await CustomerService.CreateCustomerAsync(currentCustomer);
            }
            else
            {
                await CustomerService.UpdateCustomerAsync(currentCustomer);
            }

            showAddEditForm = false;
            await LoadCustomers();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving customer: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        showAddEditForm = false;
        currentCustomer = new Customer();
        errorMessage = null;
    }

    private async Task DeleteCustomer(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (confirmed)
        {
            try
            {
                await CustomerService.DeleteCustomerAsync(id);
                await LoadCustomers();
                errorMessage = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting customer: {ex.Message}";
            }
        }
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredCustomers = customers.Where(c =>
                c.FirstName.ToLower().Contains(term) ||
                c.LastName.ToLower().Contains(term) ||
                c.Email.ToLower().Contains(term) ||
                c.PhoneNumber?.ToLower().Contains(term) == true ||
                c.City?.ToLower().Contains(term) == true ||
                c.Country?.ToLower().Contains(term) == true
            ).ToList();
        }
    }
}